# -*- coding: utf-8 -*-
"""[과제_2]_Kaggle_Bike_Sharing_Demand_윤승욱..ipynb의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GGo1mA8R-CBJDBR67kDhfpbeLuPtLvU9

# Kaggle Bike Sharing Demand
[http://www.kaggle.com/c/bike-sharing-demand](http://www.kaggle.com/c/bike-sharing-demand)

- Bike_Sharing_Demand.csv (10,886 * 12)
   - <font color = 'blue'>datetime : Date + Timestamp</font>
   - season : 1(봄), 2(여름), 3(가을), 4(겨울)
   - holiday : 0(휴일이 아닌 날), 1(토요일, 일요일을 제외한 공휴일)
   - workingday : 0(주말 및 휴일), 1(토요일, 일요일 및 휴일이 아닌 주중)
   - weather : 1(맑음, 약간흐림), 2(안개, 흐림), 3(가벼운 눈/비 + 천둥), 4(심한 눈/비, 천둥/ 번개)
   - temp : 온도(섭씨)
   - atemp : 체감온도(섭씨)
   - humidity : 습도
   - windspeed : 풍속
   - casual : 사전 등록되지 않은 사용자 대여 횟수
   - registered : 사전 등록된 사용자 대여 횟수
   - <font color = 'red'>count : 총 대여 횟수 -> 'y'
"""

import warnings
warnings.filterwarnings('ignore')

"""# I. Data Load
* 'Bike_Sharing_Demand.csv' from Github
"""

import pandas as pd

url = 'https://raw.githubusercontent.com/rusita-ai/pyData/master/Bike_Sharing_Demand.csv'
DF = pd.read_csv(url)

DF.info()

DF.head(3)

"""# II. Data Preprocessing

> ## 1) 'object' -> 'datetime64'
"""

DF['datetime'] = pd.to_datetime(DF['datetime'])

DF.info()

"""> ## 2) 'year', 'month', 'day', 'hour', 'weekday' 추출"""

DF['year'] = DF['datetime'].dt.year
DF['month'] = DF['datetime'].dt.month
DF['day'] = DF['datetime'].dt.day
DF['hour'] = DF['datetime'].dt.hour
DF['weekday'] = DF['datetime'].dt.weekday

DF.head(3)

"""> ## 3) Drop Columns

- 'datetime'
"""

DF.drop(columns = 'datetime', axis = 1, inplace = True)

DF.head(3)

"""> ## 4) 분석용 DataFrame 백업"""

DF0 = DF.copy()

DF0.head(3)

"""> ## 5) 시각화 레이블 변환"""

DF['season'] = DF['season'].map({1: 'Spring', 
                                 2: 'Summer', 
                                 3: 'Fall', 
                                 4: 'Winter'})

DF['weather'] = DF['weather'].map({1: 'Clear', 
                                   2: 'Mist, Few clouds', 
                                   3: 'Light Snow, Rain, Thunder', 
                                   4: 'Heavy Snow, Rain, Thunder'})

DF['holiday'] = DF['holiday'].map({0: 'WorkingDay', 
                                   1: 'Holiday'})

DF['workingday'] = DF['workingday'].map({0: 'Holiday', 
                                         1: 'WorkingDay'})

DF['weekday'] = DF['weekday'].map({0: 'Monday', 
                                   1: 'Tuesday', 
                                   2: 'Wednesday', 
                                   3: 'Thursday',
                                   4: 'Friday',
                                   5: 'Saturday',
                                   6: 'Sunday'})

DF.head(3)

"""# III. 탐색적데이터분석(EDA)

# IV. Modeling - Multivariate Regression

> ## 1) 변수 선택
"""

import * as toxicity from '@tensorflow-models/toxicity';

"""> ## 2) train_test_split( )

* 7 : 3
 - random_state = 2045

// The minimum prediction confidence.
const threshold = 0.9;

// Load the model. Users optionally pass in a threshold and an array of
// labels to include.
toxicity.load(threshold).then(model => {
  const sentences = ['you suck'];

  model.classify(sentences).then(predictions => {
    // `predictions` is an array of objects, one for each prediction head,
    // that contains the raw probabilities for each input along with the
    // final prediction in `match` (either `true` or `false`).
    // If neither prediction exceeds the threshold, `match` is `null`.

    console.log(predictions);
    /*
    prints:
    {
      "label": "identity_attack",
      "results": [{
        "probabilities": [0.9659664034843445, 0.03403361141681671],
        "match": false
      }]
    },
    {
      "label": "insult",
      "results": [{
        "probabilities": [0.08124706149101257, 0.9187529683113098],
        "match": true
      }]
    },
    ...
     */
  });
});> ## 3) 모델 생성

> ## 4) 모델 평가

# 
# 
# 
# The End
# 
# 
#
"""